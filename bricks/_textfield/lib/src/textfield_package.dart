import 'package:_textfield/src/base_textfield.dart';
import 'package:_textfield/src/base_textfield_item.dart';
import 'package:_textfield/src/base_textfield_type2.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:path/path.dart' as path;

class TextfieldBrick {
  static Widget type1({
    required ValueChanged<String> onChanged,
    required String title,
    required String errorText,
    required String hintText,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    required TextStyle errorStyle,
    required TextStyle titleStyle,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    FocusNode? focusNode,
    Color? backgroundColor,
    TextInputAction? textInputAction,
    ValueChanged<String>? onSubmit,
    Color errorBorderColor = Colors.red,
    List<BoxShadow>? errorShadow,
    bool isValid = true,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? contentPadding,
    BorderRadius? borderRadius,
    double? focusBorderWidth,
    Color focusBorderColor = Colors.green,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int? maxLines,
    bool readOnly = false,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    VoidCallback? onSuffixIconTap,
    VoidCallback? onPrefixIconTap,
    String? prefixIconPath,
    String? suffixIconPath,
    double? iconSize,
    Color? iconColor,
    List<BoxShadow>? shadow,
    List<BoxShadow>? focusShadow,
    TextInputType? textInputType,
    double verticalItemSpacing = 8,
    double? textfieldWidth,
  }) {
    return BaseTextfield(
      onChanged: onChanged,
      title: title,
      errorText: errorText,
      textStyle: textStyle,
      hintStyle: hintStyle,
      errorStyle: errorStyle,
      titleStyle: titleStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      hintText: hintText,
      errorBorderColor: errorBorderColor,
      errorShadow: errorShadow,
      isValid: isValid,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      contentPadding: contentPadding,
      focusNode: focusNode,
      borderRadius: borderRadius,
      focusBorderWidth: focusBorderWidth,
      focusBorderColor: focusBorderColor,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      backgroundColor: backgroundColor,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      onPrefixIconTap: onPrefixIconTap,
      onSuffixIconTap: onSuffixIconTap,
      prefixIconPath: prefixIconPath,
      suffixIconPath: suffixIconPath,
      iconColor: iconColor,
      iconSize: iconSize,
      shadow: shadow,
      focusShadow: focusShadow,
      textInputType: textInputType,
      verticalItemSpacing: verticalItemSpacing,
      textfieldWidth: textfieldWidth,
    );
  }

  static Widget search({
    required ValueChanged<String> onChanged,
    required String hintText,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    FocusNode? focusNode,
    BorderRadius? borderRadius,
    Color? backgroundColor,
    TextInputAction? textInputAction,
    ValueChanged<String>? onSubmit,
    List<BoxShadow>? errorShadow,
    bool isValid = true,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? contentPadding,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int? maxLines,
    bool readOnly = false,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    String? prefixIconPath,
    VoidCallback? onPrefixIconTap,
    double? iconSize,
    Color? iconColor,
    List<BoxShadow>? shadow,
    List<BoxShadow>? focusShadow,
    TextInputType? textInputType,
    double? textfieldWidth,
  }) {
    return BaseTextfield(
      onChanged: onChanged,
      textStyle: textStyle,
      hintStyle: hintStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      borderRadius: borderRadius,
      hintText: hintText,
      errorShadow: errorShadow,
      isValid: isValid,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      contentPadding: contentPadding,
      focusNode: focusNode,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      backgroundColor: backgroundColor,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      onPrefixIconTap: onPrefixIconTap,
      prefixIconPath: prefixIconPath,
      iconColor: iconColor,
      iconSize: iconSize,
      shadow: shadow,
      focusShadow: focusShadow,
      textInputType: textInputType,
      textfieldWidth: textfieldWidth,
      isSearch: true,
    );
  }

  static Widget animationSearch({
    required VoidCallback onPressed,
    required String searchIconPath,
    required TextStyle animationTextStype,
    required String animationText,
    required Color backgroundColor,
    required Color iconColor,
    double? iconSize,
    VoidCallback? onIconPressed,
  }) {
    return InkWell(
      onTap: onPressed,
      child: Container(
        decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12), color: backgroundColor),
        child: Row(
          children: [
            IconButton(
              icon: path.extension(searchIconPath) == ".svg"
                  ? SvgPicture.asset(
                      searchIconPath,
                      color: iconColor,
                      height: iconSize,
                      width: iconSize,
                      fit: BoxFit.contain,
                    )
                  : Image.asset(
                      searchIconPath,
                      height: iconSize,
                      color: iconColor,
                      width: iconSize,
                      fit: BoxFit.contain,
                    ),
              onPressed: onIconPressed,
            ),
            DefaultTextStyle(
              style: animationTextStype,
              child: AnimatedTextKit(
                repeatForever: true,
                isRepeatingAnimation: true,
                animatedTexts: [
                  TyperAnimatedText(animationText,
                      speed: const Duration(milliseconds: 200)),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  static BaseTextfieldItem type2Item({
    required ValueChanged<String> onChanged,
    ValueChanged<String>? onSubmit,
    required String title,
    required String hintText,
    bool isValid = true,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? titlePadding,
    double? titleStarSpacing,
    EdgeInsets? contentPadding,
    FocusNode? focusNode,
    BorderRadius? borderRadius,
    double? underBorderWidth,
    Color underLineColor = Colors.grey,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int? maxLines,
    required Color backgroundColor,
    bool readOnly = false,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    required TextStyle titleStyle,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    TextInputAction? textInputAction,
    TextInputType? textInputType,
    double verticalItemSpacing = 8,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    bool isNavigation = false,
    double? iconSize,
    Color? iconColor,
    AlignmentGeometry? iconAlign,
    VoidCallback? onNavigationPressed,
  }) {
    return BaseTextfieldItem(
      onChanged: onChanged,
      title: title,
      backgroundColor: backgroundColor,
      textStyle: textStyle,
      hintStyle: hintStyle,
      titleStyle: titleStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      hintText: hintText,
      isValid: isValid,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      titlePadding: titlePadding,
      titleStarSpacing: titleStarSpacing,
      contentPadding: contentPadding,
      focusNode: focusNode,
      borderRadius: borderRadius,
      underBorderWidth: underBorderWidth,
      underLineColor: underLineColor,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      textInputType: textInputType,
      verticalItemSpacing: verticalItemSpacing,
      isNavigation: isNavigation,
      iconSize: iconSize,
      iconColor: iconColor,
      iconAlign: iconAlign,
      onNavigationPressed: onNavigationPressed,
    );
  }

  static Widget type2({
    required String groupTitle,
    required TextStyle groupTitleStyle,
    required String errorText,
    required TextStyle errorStyle,
    required TextStyle descriptionStyle,
    required String description,
    BorderRadius? borderRadius,
    EdgeInsets? groupTitlePadding,
    EdgeInsets? descriptionPadding,
    EdgeInsets? errorTextPadding,
    required List<BaseTextfieldItem> items,
    bool isValid = true,
  }) {
    return BaseTextfieldType2(
        groupTitle: groupTitle,
        groupTitlePadding: groupTitlePadding,
        borderRadius: borderRadius,
        descriptionPadding: descriptionPadding,
        errorTextPadding: errorTextPadding,
        isValid: isValid,
        errorText: errorText,
        description: description,
        items: items,
        groupTitleStyle: groupTitleStyle,
        errorStyle: errorStyle,
        descriptionStyle: descriptionStyle);
  }
}
